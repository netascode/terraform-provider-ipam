// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type resourceAllocateType struct{}

func (t resourceAllocateType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "Allocate one IP per ID.",

		Attributes: map[string]tfsdk.Attribute{
			"addresses": {
				MarkdownDescription: "A list of IDs and its addresses.",
				Required:            true,
				Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{
					"ip": {
						MarkdownDescription: "IP address.",
						Type:                types.StringType,
						Computed:            true,
						PlanModifiers: tfsdk.AttributePlanModifiers{
							tfsdk.UseStateForUnknown(),
						},
					},
					"prefix_length": {
						MarkdownDescription: "Prefix length.",
						Type:                types.StringType,
						Computed:            true,
						PlanModifiers: tfsdk.AttributePlanModifiers{
							tfsdk.UseStateForUnknown(),
						},
					},
					"gateway": {
						MarkdownDescription: "Gateway IP.",
						Type:                types.StringType,
						Computed:            true,
						PlanModifiers: tfsdk.AttributePlanModifiers{
							tfsdk.UseStateForUnknown(),
						},
					},
				}, tfsdk.MapNestedAttributesOptions{}),
			},
		},
	}, nil
}

type Allocate struct {
	Addresses map[string]AllocateAddress `tfsdk:"addresses"`
}

type AllocateAddress struct {
	Ip types.String `tfsdk:"ip"`
	PrefixLength types.String `tfsdk:"prefix_length"`
	Gateway types.String `tfsdk:"gateway"`
}

func (t resourceAllocateType) NewResource(ctx context.Context, in tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return resourceAllocate{
		provider: provider,
	}, diags
}

type resourceAllocate struct {
	provider provider
}

func (r resourceAllocate) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var plan, state Allocate

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Create"))

	addresses := make(map[string]AllocateAddress)

	index := 0
	for id := range plan.Addresses {
		ip := types.String{Value: r.provider.addresses[index].ip}
		prefixLength := types.String{Value: r.provider.addresses[index].prefixLength}
		gateway := types.String{Value: r.provider.addresses[index].gateway}
		addresses[id] = AllocateAddress{Ip: ip, PrefixLength: prefixLength, Gateway: gateway}
		tflog.Debug(ctx, fmt.Sprintf("Allocate IP to %s: %v", id, ip.Value))
		index += 1
	}

	state.Addresses = addresses

	tflog.Debug(ctx, fmt.Sprintf("Create finished successfully"))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceAllocate) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state Allocate

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Read"))

	tflog.Debug(ctx, fmt.Sprintf("Read finished successfully"))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceAllocate) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	var plan, state Allocate

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Update"))

	addresses := make(map[string]AllocateAddress)

	var newAddresses []string

	for id, address := range plan.Addresses {
		// check if an address is already assigned
		if address.Ip.Value != "" {
			addresses[id] = address
			continue
		}
		// find next free ip
		for _, a := range r.provider.addresses {
			inUse := false
			// verify state if already in use
			for _, inUseAddr := range plan.Addresses {
				if a.ip == inUseAddr.Ip.Value {
					inUse = true
					break
				}
			}
			// verify if assigned during this operation
			for _, inUseAddr := range newAddresses {
				if a.ip == inUseAddr {
					inUse = true
					break
				}
			}
			if inUse {
				continue
			}
			ip := types.String{Value: a.ip}
			prefixLength := types.String{Value: a.prefixLength}
			gateway := types.String{Value: a.gateway}
			addresses[id] = AllocateAddress{Ip: ip, PrefixLength: prefixLength, Gateway: gateway}
			tflog.Debug(ctx, fmt.Sprintf("Allocate IP to %s: %v", id, ip.Value))
			newAddresses = append(newAddresses, ip.Value)
			break
		}
	}

	state.Addresses = addresses

	tflog.Debug(ctx, fmt.Sprintf("Update finished successfully"))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceAllocate) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var state Allocate

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Delete"))

	tflog.Debug(ctx, fmt.Sprintf("Delete finished successfully"))

	resp.State.RemoveResource(ctx)
}
