// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"time"
	"math/rand"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var _ resource.Resource = (*ipamAllocateResource)(nil)

func NewIpamAllocateResource() resource.Resource {
	return &ipamAllocateResource{}
}

type ipamAllocateResource struct{
	addresses []providerAddress
}

func (r *ipamAllocateResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_allocate"
}

func (r *ipamAllocateResource) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "Allocate one IP per ID.",

		Attributes: map[string]tfsdk.Attribute{
			"id": {
				Description: "Random internal ID.",
				Type:        types.StringType,
				Computed:    true,
			},
			"addresses": {
				MarkdownDescription: "A list of IDs and its addresses.",
				Required:            true,
				Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{
					"ip": {
						MarkdownDescription: "IP address.",
						Type:                types.StringType,
						Computed:            true,
						PlanModifiers: tfsdk.AttributePlanModifiers{
							resource.UseStateForUnknown(),
						},
					},
					"prefix_length": {
						MarkdownDescription: "Prefix length.",
						Type:                types.StringType,
						Computed:            true,
						PlanModifiers: tfsdk.AttributePlanModifiers{
							resource.UseStateForUnknown(),
						},
					},
					"gateway": {
						MarkdownDescription: "Gateway IP.",
						Type:                types.StringType,
						Computed:            true,
						PlanModifiers: tfsdk.AttributePlanModifiers{
							resource.UseStateForUnknown(),
						},
					},
				}),
			},
		},
	}, nil
}

type Allocate struct {
	Id types.String `tfsdk:"id"`
	Addresses map[string]AllocateAddress `tfsdk:"addresses"`
}

type AllocateAddress struct {
	Ip types.String `tfsdk:"ip"`
	PrefixLength types.String `tfsdk:"prefix_length"`
	Gateway types.String `tfsdk:"gateway"`
}

func (r *ipamAllocateResource) Configure(ctx context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.addresses = req.ProviderData.([]providerAddress)
}

func (r *ipamAllocateResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan, state Allocate

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Create"))

	addresses := make(map[string]AllocateAddress)

	index := 0
	for id := range plan.Addresses {
		ip := types.StringValue(r.addresses[index].ip)
		prefixLength := types.StringValue(r.addresses[index].prefixLength)
		gateway := types.StringValue(r.addresses[index].gateway)
		addresses[id] = AllocateAddress{Ip: ip, PrefixLength: prefixLength, Gateway: gateway}
		tflog.Debug(ctx, fmt.Sprintf("Allocate IP to %s: %v", id, ip.ValueString()))
		index += 1
	}

	state.Addresses = addresses

	rand.Seed(time.Now().UnixNano())
	state.Id = types.StringValue(fmt.Sprint(rand.Int63()))

	tflog.Debug(ctx, fmt.Sprintf("Create finished successfully"))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *ipamAllocateResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state Allocate

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Read"))

	tflog.Debug(ctx, fmt.Sprintf("Read finished successfully"))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *ipamAllocateResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state Allocate

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Update"))

	addresses := make(map[string]AllocateAddress)

	var newAddresses []string

	for id, address := range plan.Addresses {
		// check if an address is already assigned
		if address.Ip.ValueString() != "" {
			addresses[id] = address
			continue
		}
		// find next free ip
		for _, a := range r.addresses {
			inUse := false
			// verify state if already in use
			for _, inUseAddr := range plan.Addresses {
				if a.ip == inUseAddr.Ip.ValueString() {
					inUse = true
					break
				}
			}
			// verify if assigned during this operation
			for _, inUseAddr := range newAddresses {
				if a.ip == inUseAddr {
					inUse = true
					break
				}
			}
			if inUse {
				continue
			}
			ip := types.StringValue(a.ip)
			prefixLength := types.StringValue(a.prefixLength)
			gateway := types.StringValue(a.gateway)
			addresses[id] = AllocateAddress{Ip: ip, PrefixLength: prefixLength, Gateway: gateway}
			tflog.Debug(ctx, fmt.Sprintf("Allocate IP to %s: %v", id, ip.ValueString()))
			newAddresses = append(newAddresses, ip.ValueString())
			break
		}
	}

	state.Addresses = addresses

	tflog.Debug(ctx, fmt.Sprintf("Update finished successfully"))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *ipamAllocateResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state Allocate

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Beginning Delete"))

	tflog.Debug(ctx, fmt.Sprintf("Delete finished successfully"))

	resp.State.RemoveResource(ctx)
}
